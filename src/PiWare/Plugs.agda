module PiWare.Plugs where

open import Data.Bool using () renaming (Bool to ùîπ)
open import Data.Nat using (‚Ñï; _+_; suc; _‚â§?_; _‚â§_; _‚â•_)
open import Data.Fin using (Fin; to‚Ñï; from‚Ñï‚â§; reduce‚â•; raise; inject+)
                     renaming (zero to Fz; suc to Fs)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Product using (_√ó_)
open import Function using (_‚àò_; id)
open import Relation.Nullary using (yes; no) renaming (¬¨_ to ¬¨¬¨_)
open import Relation.Binary.PropositionalEquality using (sym)

open import PiWare.Circuit 




-- Plugs
private
    splitFin : ‚àÄ {n m} ‚Üí Fin (n + m) ‚Üí Fin n ‚äé Fin m
    splitFin {n} {_} x with suc (to‚Ñï x) ‚â§? n
    splitFin {_} {_} x | yes proof = inj‚ÇÅ (from‚Ñï‚â§ proof)
    splitFin {n} {m} x | no  proof = inj‚ÇÇ (reduce‚â• {n} {m} x (massageInequality proof)) 
        where massageInequality : {n m : ‚Ñï} ‚Üí ¬¨¬¨ (suc n ‚â§ m) ‚Üí (n ‚â• m)
              massageInequality {n} {m} ineq = {!!}

    uniteFinSwap : ‚àÄ {n m} ‚Üí Fin n ‚äé Fin m ‚Üí Fin (m + n)
    uniteFinSwap {_} {m} (inj‚ÇÅ x) = raise   m x
    uniteFinSwap {n} {_} (inj‚ÇÇ y) = inject+ n y

    pSwap' : {Œ± : Set} {n m : ‚Ñï} ‚Üí Core‚ÑÇ Œ± (n + m) (m + n)
    pSwap' {_} {n} {m} = Plug p
        where p : Fin (m + n) ‚Üí Fin (n + m)
              p = uniteFinSwap ‚àò splitFin {m} {n}

    pid' : ‚àÄ {Œ± n} ‚Üí Core‚ÑÇ Œ± n n
    pid' = Plug id

    import Algebra as Alg
    import Data.Nat.Properties as NP
    open module CS = Alg.CommutativeSemiring NP.commutativeSemiring using (+-assoc)

    pALR' : {Œ± : Set} {w v y : ‚Ñï} ‚Üí Core‚ÑÇ Œ± ((w + v) + y) (w + (v + y))
    pALR' {_} {w} {v} {y} = Plug p
        where p : Fin (w + (v + y)) ‚Üí Fin ((w + v) + y)
              p x rewrite +-assoc w v y = x
              
    pARL' : {Œ± : Set} {w v y : ‚Ñï} ‚Üí Core‚ÑÇ Œ± (w + (v + y)) ((w + v) + y)
    pARL' {_} {w} {v} {y} = Plug p
        where p : Fin ((w + v) + y) ‚Üí Fin (w + (v + y))
              p x rewrite sym (+-assoc w v y) = x

    
pSwap : {Œ± Œ≤ : Set} {#Œ± #Œ≤ : ‚Ñï} ‚¶É sŒ± : Synth Œ± {#Œ±} ‚¶Ñ ‚¶É sŒ≤ : Synth Œ≤ {#Œ≤} ‚¶Ñ ‚Üí ‚ÑÇ (Œ± √ó Œ≤) (Œ≤ √ó Œ±)
pSwap {#Œ± = #Œ±} {#Œ≤ = #Œ≤} = Mk‚ÑÇ ‚¶É synthPair ‚¶Ñ ‚¶É synthPair ‚¶Ñ (pSwap' {ùîπ} {#Œ±} {#Œ≤})


pid : {Œ± : Set} {#Œ± : ‚Ñï} ‚¶É sŒ± : Synth Œ± {#Œ±} ‚¶Ñ ‚Üí ‚ÑÇ Œ± Œ±
pid ‚¶É sŒ± ‚¶Ñ = Mk‚ÑÇ ‚¶É sŒ± ‚¶Ñ ‚¶É sŒ± ‚¶Ñ pid'


pALR : {Œ± Œ≤ Œ≥ : Set} {#Œ± #Œ≤ #Œ≥ : ‚Ñï}
       ‚Üí ‚¶É sŒ± : Synth Œ± {#Œ±} ‚¶Ñ ‚¶É sŒ≤ : Synth Œ≤ {#Œ≤} ‚¶Ñ ‚¶É sŒ≥ : Synth Œ≥ {#Œ≥} ‚¶Ñ
       ‚Üí ‚ÑÇ ((Œ± √ó Œ≤) √ó Œ≥) (Œ± √ó (Œ≤ √ó Œ≥))
pALR {#Œ± = #Œ±} {#Œ≤ = #Œ≤} {#Œ≥ = #Œ≥} ‚¶É sŒ± ‚¶Ñ ‚¶É sŒ≤ ‚¶Ñ ‚¶É sŒ≥ ‚¶Ñ =
    Mk‚ÑÇ ‚¶É synthPair ‚¶É synthPair ‚¶Ñ ‚¶É sŒ≥ ‚¶Ñ ‚¶Ñ ‚¶É synthPair ‚¶É sŒ± ‚¶Ñ ‚¶É synthPair ‚¶Ñ ‚¶Ñ
        (pALR' {ùîπ} {#Œ±} {#Œ≤} {#Œ≥})
        

pARL : {Œ± Œ≤ Œ≥ : Set} {#Œ± #Œ≤ #Œ≥ : ‚Ñï}
       ‚Üí ‚¶É sŒ± : Synth Œ± {#Œ±} ‚¶Ñ ‚¶É sŒ≤ : Synth Œ≤ {#Œ≤} ‚¶Ñ ‚¶É sŒ≥ : Synth Œ≥ {#Œ≥} ‚¶Ñ
       ‚Üí ‚ÑÇ (Œ± √ó (Œ≤ √ó Œ≥)) ((Œ± √ó Œ≤) √ó Œ≥)
pARL {#Œ± = #Œ±} {#Œ≤ = #Œ≤} {#Œ≥ = #Œ≥} ‚¶É sŒ± ‚¶Ñ ‚¶É sŒ≤ ‚¶Ñ ‚¶É sŒ≥ ‚¶Ñ =
    Mk‚ÑÇ ‚¶É synthPair ‚¶É sŒ± ‚¶Ñ ‚¶É synthPair ‚¶Ñ ‚¶Ñ ‚¶É synthPair ‚¶É synthPair ‚¶Ñ ‚¶É sŒ≥ ‚¶Ñ ‚¶Ñ
        (pARL' {ùîπ} {#Œ±} {#Œ≤} {#Œ≥})


-- pComm : {Œ± : Set} {w v : ‚Ñï} ‚Üí ‚ÑÇ Œ± (w + v) (v + w)
-- pComm {_} {w} {v} = Plug pComm'
--     where pComm' : Fin (v + w) ‚Üí Fin (w + v)
--           pComm' x rewrite CS.+-comm w v = x

-- -- Is not actually intertwining. Size-only indices don't make the type completely specify a plug.
-- pIntertwine : {Œ± : Set} {a b c d : ‚Ñï} ‚Üí ‚ÑÇ Œ± ((a + b) + (c + d)) ((a + c) + (b + d))
-- pIntertwine {_} {a} {b} {c} {d} = Plug pIntertwine'
--     where pIntertwine' : Fin ((a + c) + (b + d)) ‚Üí Fin ((a + b) + (c + d))
--           pIntertwine' x rewrite sym (CS.+-assoc (a + b) c d)
--                                | CS.+-assoc a b c
--                                | CS.+-comm b c
--                                | sym (CS.+-assoc a c b)
--                                | CS.+-assoc (a + c) b d = x

-- -- vector plugs
-- pHead : {Œ± : Set} {n : ‚Ñï} ‚Üí ‚ÑÇ Œ± (suc n) 1
-- pHead = Plug pHead'
--     where pHead' : {n : ‚Ñï} ‚Üí Fin 1 ‚Üí Fin (suc n)
--           pHead' Fz = Fz
--           pHead' (Fs ())

-- pTail : {Œ± : Set} {n : ‚Ñï} ‚Üí ‚ÑÇ Œ± (suc n) n
-- pTail = Plug pTail'
--     where pTail' : {n : ‚Ñï} ‚Üí Fin n ‚Üí Fin (suc n)
--           pTail' x = Fs x

-- pUncons : {Œ± : Set} {w n : ‚Ñï} ‚Üí ‚ÑÇ Œ± (suc n * w) (w + n * w)
-- pUncons {_} {w} {n} = Plug pUncons'
--     where pUncons' : Fin (w + n * w) ‚Üí Fin (suc n * w)
--           pUncons' x = x

-- pCons : ‚àÄ {Œ± w n} ‚Üí ‚ÑÇ Œ± (w + n * w) (suc n * w)
-- pCons {_} {w} {n} = Plug pCons'
--     where pCons' : Fin (suc n * w) ‚Üí Fin (w + n * w)
--           pCons' x = x
